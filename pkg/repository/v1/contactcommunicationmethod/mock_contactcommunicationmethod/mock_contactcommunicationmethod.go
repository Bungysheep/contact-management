// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/v1/contactcommunicationmethod/contactcommunicationmethod.go

// Package mock_contactcommunicationmethod is a generated GoMock package.
package mock_contactcommunicationmethod

import (
	context "context"
	contactcommunicationmethod "github.com/bungysheep/contact-management/pkg/models/v1/contactcommunicationmethod"
	message "github.com/bungysheep/contact-management/pkg/models/v1/message"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIContactCommunicationMethodRepository is a mock of IContactCommunicationMethodRepository interface
type MockIContactCommunicationMethodRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIContactCommunicationMethodRepositoryMockRecorder
}

// MockIContactCommunicationMethodRepositoryMockRecorder is the mock recorder for MockIContactCommunicationMethodRepository
type MockIContactCommunicationMethodRepositoryMockRecorder struct {
	mock *MockIContactCommunicationMethodRepository
}

// NewMockIContactCommunicationMethodRepository creates a new mock instance
func NewMockIContactCommunicationMethodRepository(ctrl *gomock.Controller) *MockIContactCommunicationMethodRepository {
	mock := &MockIContactCommunicationMethodRepository{ctrl: ctrl}
	mock.recorder = &MockIContactCommunicationMethodRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIContactCommunicationMethodRepository) EXPECT() *MockIContactCommunicationMethodRepositoryMockRecorder {
	return m.recorder
}

// DoRead mocks base method
func (m *MockIContactCommunicationMethodRepository) DoRead(arg0 context.Context, arg1 string, arg2, arg3 int64) (*contactcommunicationmethod.ContactCommunicationMethod, message.IMessage) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRead", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*contactcommunicationmethod.ContactCommunicationMethod)
	ret1, _ := ret[1].(message.IMessage)
	return ret0, ret1
}

// DoRead indicates an expected call of DoRead
func (mr *MockIContactCommunicationMethodRepositoryMockRecorder) DoRead(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRead", reflect.TypeOf((*MockIContactCommunicationMethodRepository)(nil).DoRead), arg0, arg1, arg2, arg3)
}

// DoReadAll mocks base method
func (m *MockIContactCommunicationMethodRepository) DoReadAll(arg0 context.Context, arg1 string, arg2 int64) ([]*contactcommunicationmethod.ContactCommunicationMethod, message.IMessage) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoReadAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*contactcommunicationmethod.ContactCommunicationMethod)
	ret1, _ := ret[1].(message.IMessage)
	return ret0, ret1
}

// DoReadAll indicates an expected call of DoReadAll
func (mr *MockIContactCommunicationMethodRepositoryMockRecorder) DoReadAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoReadAll", reflect.TypeOf((*MockIContactCommunicationMethodRepository)(nil).DoReadAll), arg0, arg1, arg2)
}

// DoInsert mocks base method
func (m *MockIContactCommunicationMethodRepository) DoInsert(arg0 context.Context, arg1 *contactcommunicationmethod.ContactCommunicationMethod) message.IMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInsert", arg0, arg1)
	ret0, _ := ret[0].(message.IMessage)
	return ret0
}

// DoInsert indicates an expected call of DoInsert
func (mr *MockIContactCommunicationMethodRepositoryMockRecorder) DoInsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInsert", reflect.TypeOf((*MockIContactCommunicationMethodRepository)(nil).DoInsert), arg0, arg1)
}

// DoUpdate mocks base method
func (m *MockIContactCommunicationMethodRepository) DoUpdate(arg0 context.Context, arg1 *contactcommunicationmethod.ContactCommunicationMethod) message.IMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoUpdate", arg0, arg1)
	ret0, _ := ret[0].(message.IMessage)
	return ret0
}

// DoUpdate indicates an expected call of DoUpdate
func (mr *MockIContactCommunicationMethodRepositoryMockRecorder) DoUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoUpdate", reflect.TypeOf((*MockIContactCommunicationMethodRepository)(nil).DoUpdate), arg0, arg1)
}

// DoDelete mocks base method
func (m *MockIContactCommunicationMethodRepository) DoDelete(arg0 context.Context, arg1 string, arg2, arg3 int64) message.IMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDelete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(message.IMessage)
	return ret0
}

// DoDelete indicates an expected call of DoDelete
func (mr *MockIContactCommunicationMethodRepositoryMockRecorder) DoDelete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDelete", reflect.TypeOf((*MockIContactCommunicationMethodRepository)(nil).DoDelete), arg0, arg1, arg2, arg3)
}

// DoDeleteAll mocks base method
func (m *MockIContactCommunicationMethodRepository) DoDeleteAll(arg0 context.Context, arg1 string, arg2 int64) message.IMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDeleteAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(message.IMessage)
	return ret0
}

// DoDeleteAll indicates an expected call of DoDeleteAll
func (mr *MockIContactCommunicationMethodRepositoryMockRecorder) DoDeleteAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDeleteAll", reflect.TypeOf((*MockIContactCommunicationMethodRepository)(nil).DoDeleteAll), arg0, arg1, arg2)
}
