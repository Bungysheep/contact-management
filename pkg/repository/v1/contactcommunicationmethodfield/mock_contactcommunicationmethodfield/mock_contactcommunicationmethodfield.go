// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/v1/contactcommunicationmethodfield/contactcommunicationmethodfield.go

// Package mock_contactcommunicationmethodfield is a generated GoMock package.
package mock_contactcommunicationmethodfield

import (
	context "context"
	contactcommunicationmethodfield "github.com/bungysheep/contact-management/pkg/models/v1/contactcommunicationmethodfield"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIContactCommunicationMethodFieldRepository is a mock of IContactCommunicationMethodFieldRepository interface
type MockIContactCommunicationMethodFieldRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIContactCommunicationMethodFieldRepositoryMockRecorder
}

// MockIContactCommunicationMethodFieldRepositoryMockRecorder is the mock recorder for MockIContactCommunicationMethodFieldRepository
type MockIContactCommunicationMethodFieldRepositoryMockRecorder struct {
	mock *MockIContactCommunicationMethodFieldRepository
}

// NewMockIContactCommunicationMethodFieldRepository creates a new mock instance
func NewMockIContactCommunicationMethodFieldRepository(ctrl *gomock.Controller) *MockIContactCommunicationMethodFieldRepository {
	mock := &MockIContactCommunicationMethodFieldRepository{ctrl: ctrl}
	mock.recorder = &MockIContactCommunicationMethodFieldRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIContactCommunicationMethodFieldRepository) EXPECT() *MockIContactCommunicationMethodFieldRepositoryMockRecorder {
	return m.recorder
}

// DoRead mocks base method
func (m *MockIContactCommunicationMethodFieldRepository) DoRead(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]*contactcommunicationmethodfield.ContactCommunicationMethodField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRead", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*contactcommunicationmethodfield.ContactCommunicationMethodField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoRead indicates an expected call of DoRead
func (mr *MockIContactCommunicationMethodFieldRepositoryMockRecorder) DoRead(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRead", reflect.TypeOf((*MockIContactCommunicationMethodFieldRepository)(nil).DoRead), arg0, arg1, arg2, arg3)
}

// DoInsert mocks base method
func (m *MockIContactCommunicationMethodFieldRepository) DoInsert(arg0 context.Context, arg1 *contactcommunicationmethodfield.ContactCommunicationMethodField) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInsert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoInsert indicates an expected call of DoInsert
func (mr *MockIContactCommunicationMethodFieldRepositoryMockRecorder) DoInsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInsert", reflect.TypeOf((*MockIContactCommunicationMethodFieldRepository)(nil).DoInsert), arg0, arg1)
}

// DoUpdate mocks base method
func (m *MockIContactCommunicationMethodFieldRepository) DoUpdate(arg0 context.Context, arg1 *contactcommunicationmethodfield.ContactCommunicationMethodField) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoUpdate indicates an expected call of DoUpdate
func (mr *MockIContactCommunicationMethodFieldRepositoryMockRecorder) DoUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoUpdate", reflect.TypeOf((*MockIContactCommunicationMethodFieldRepository)(nil).DoUpdate), arg0, arg1)
}

// DoDelete mocks base method
func (m *MockIContactCommunicationMethodFieldRepository) DoDelete(arg0 context.Context, arg1 string, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDelete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoDelete indicates an expected call of DoDelete
func (mr *MockIContactCommunicationMethodFieldRepositoryMockRecorder) DoDelete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDelete", reflect.TypeOf((*MockIContactCommunicationMethodFieldRepository)(nil).DoDelete), arg0, arg1, arg2, arg3)
}
