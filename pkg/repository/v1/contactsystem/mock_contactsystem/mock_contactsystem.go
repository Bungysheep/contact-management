// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/v1/contactsystem/contactsystem.go

// Package mock_contactsystem is a generated GoMock package.
package mock_contactsystem

import (
	context "context"
	contactsystem "github.com/bungysheep/contact-management/pkg/api/v1/contactsystem"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIContactSystemRepository is a mock of IContactSystemRepository interface
type MockIContactSystemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIContactSystemRepositoryMockRecorder
}

// MockIContactSystemRepositoryMockRecorder is the mock recorder for MockIContactSystemRepository
type MockIContactSystemRepositoryMockRecorder struct {
	mock *MockIContactSystemRepository
}

// NewMockIContactSystemRepository creates a new mock instance
func NewMockIContactSystemRepository(ctrl *gomock.Controller) *MockIContactSystemRepository {
	mock := &MockIContactSystemRepository{ctrl: ctrl}
	mock.recorder = &MockIContactSystemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIContactSystemRepository) EXPECT() *MockIContactSystemRepositoryMockRecorder {
	return m.recorder
}

// DoRead mocks base method
func (m *MockIContactSystemRepository) DoRead(arg0 context.Context, arg1 string) (*contactsystem.ContactSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRead", arg0, arg1)
	ret0, _ := ret[0].(*contactsystem.ContactSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoRead indicates an expected call of DoRead
func (mr *MockIContactSystemRepositoryMockRecorder) DoRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRead", reflect.TypeOf((*MockIContactSystemRepository)(nil).DoRead), arg0, arg1)
}

// DoReadAll mocks base method
func (m *MockIContactSystemRepository) DoReadAll(arg0 context.Context) ([]*contactsystem.ContactSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoReadAll", arg0)
	ret0, _ := ret[0].([]*contactsystem.ContactSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoReadAll indicates an expected call of DoReadAll
func (mr *MockIContactSystemRepositoryMockRecorder) DoReadAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoReadAll", reflect.TypeOf((*MockIContactSystemRepository)(nil).DoReadAll), arg0)
}

// DoInsert mocks base method
func (m *MockIContactSystemRepository) DoInsert(arg0 context.Context, arg1 *contactsystem.ContactSystem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInsert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoInsert indicates an expected call of DoInsert
func (mr *MockIContactSystemRepositoryMockRecorder) DoInsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInsert", reflect.TypeOf((*MockIContactSystemRepository)(nil).DoInsert), arg0, arg1)
}

// DoUpdate mocks base method
func (m *MockIContactSystemRepository) DoUpdate(arg0 context.Context, arg1 *contactsystem.ContactSystem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoUpdate indicates an expected call of DoUpdate
func (mr *MockIContactSystemRepositoryMockRecorder) DoUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoUpdate", reflect.TypeOf((*MockIContactSystemRepository)(nil).DoUpdate), arg0, arg1)
}

// DoDelete mocks base method
func (m *MockIContactSystemRepository) DoDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoDelete indicates an expected call of DoDelete
func (mr *MockIContactSystemRepositoryMockRecorder) DoDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDelete", reflect.TypeOf((*MockIContactSystemRepository)(nil).DoDelete), arg0, arg1)
}
