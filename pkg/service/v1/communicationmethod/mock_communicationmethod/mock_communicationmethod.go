// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/service/v1/communicationmethod/communicationmethod.go

// Package mock_communicationmethod is a generated GoMock package.
package mock_communicationmethod

import (
	context "context"
	communicationmethod "github.com/bungysheep/contact-management/pkg/models/v1/communicationmethod"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockICommunicationMethodService is a mock of ICommunicationMethodService interface
type MockICommunicationMethodService struct {
	ctrl     *gomock.Controller
	recorder *MockICommunicationMethodServiceMockRecorder
}

// MockICommunicationMethodServiceMockRecorder is the mock recorder for MockICommunicationMethodService
type MockICommunicationMethodServiceMockRecorder struct {
	mock *MockICommunicationMethodService
}

// NewMockICommunicationMethodService creates a new mock instance
func NewMockICommunicationMethodService(ctrl *gomock.Controller) *MockICommunicationMethodService {
	mock := &MockICommunicationMethodService{ctrl: ctrl}
	mock.recorder = &MockICommunicationMethodServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICommunicationMethodService) EXPECT() *MockICommunicationMethodServiceMockRecorder {
	return m.recorder
}

// DoRead mocks base method
func (m *MockICommunicationMethodService) DoRead(arg0 context.Context, arg1, arg2 string) (*communicationmethod.CommunicationMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRead", arg0, arg1, arg2)
	ret0, _ := ret[0].(*communicationmethod.CommunicationMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoRead indicates an expected call of DoRead
func (mr *MockICommunicationMethodServiceMockRecorder) DoRead(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRead", reflect.TypeOf((*MockICommunicationMethodService)(nil).DoRead), arg0, arg1, arg2)
}

// DoReadAll mocks base method
func (m *MockICommunicationMethodService) DoReadAll(arg0 context.Context, arg1 string) ([]*communicationmethod.CommunicationMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoReadAll", arg0, arg1)
	ret0, _ := ret[0].([]*communicationmethod.CommunicationMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoReadAll indicates an expected call of DoReadAll
func (mr *MockICommunicationMethodServiceMockRecorder) DoReadAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoReadAll", reflect.TypeOf((*MockICommunicationMethodService)(nil).DoReadAll), arg0, arg1)
}

// DoSave mocks base method
func (m *MockICommunicationMethodService) DoSave(arg0 context.Context, arg1 *communicationmethod.CommunicationMethod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoSave indicates an expected call of DoSave
func (mr *MockICommunicationMethodServiceMockRecorder) DoSave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSave", reflect.TypeOf((*MockICommunicationMethodService)(nil).DoSave), arg0, arg1)
}

// DoDelete mocks base method
func (m *MockICommunicationMethodService) DoDelete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoDelete indicates an expected call of DoDelete
func (mr *MockICommunicationMethodServiceMockRecorder) DoDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDelete", reflect.TypeOf((*MockICommunicationMethodService)(nil).DoDelete), arg0, arg1, arg2)
}
