// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/service/v1/contact/contact.go

// Package mock_contact is a generated GoMock package.
package mock_contact

import (
	context "context"
	contact "github.com/bungysheep/contact-management/pkg/models/v1/contact"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIContactService is a mock of IContactService interface
type MockIContactService struct {
	ctrl     *gomock.Controller
	recorder *MockIContactServiceMockRecorder
}

// MockIContactServiceMockRecorder is the mock recorder for MockIContactService
type MockIContactServiceMockRecorder struct {
	mock *MockIContactService
}

// NewMockIContactService creates a new mock instance
func NewMockIContactService(ctrl *gomock.Controller) *MockIContactService {
	mock := &MockIContactService{ctrl: ctrl}
	mock.recorder = &MockIContactServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIContactService) EXPECT() *MockIContactServiceMockRecorder {
	return m.recorder
}

// DoRead mocks base method
func (m *MockIContactService) DoRead(arg0 context.Context, arg1 string, arg2 int64) (*contact.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRead", arg0, arg1, arg2)
	ret0, _ := ret[0].(*contact.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoRead indicates an expected call of DoRead
func (mr *MockIContactServiceMockRecorder) DoRead(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRead", reflect.TypeOf((*MockIContactService)(nil).DoRead), arg0, arg1, arg2)
}

// DoReadAll mocks base method
func (m *MockIContactService) DoReadAll(arg0 context.Context, arg1 string) ([]*contact.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoReadAll", arg0, arg1)
	ret0, _ := ret[0].([]*contact.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoReadAll indicates an expected call of DoReadAll
func (mr *MockIContactServiceMockRecorder) DoReadAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoReadAll", reflect.TypeOf((*MockIContactService)(nil).DoReadAll), arg0, arg1)
}

// DoSave mocks base method
func (m *MockIContactService) DoSave(arg0 context.Context, arg1 *contact.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoSave indicates an expected call of DoSave
func (mr *MockIContactServiceMockRecorder) DoSave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSave", reflect.TypeOf((*MockIContactService)(nil).DoSave), arg0, arg1)
}

// DoDelete mocks base method
func (m *MockIContactService) DoDelete(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoDelete indicates an expected call of DoDelete
func (mr *MockIContactServiceMockRecorder) DoDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDelete", reflect.TypeOf((*MockIContactService)(nil).DoDelete), arg0, arg1, arg2)
}
